import ABSL;
import AP.FO.BusinessPartner.Global;
import AP.FO.MOM.Global;
import AP.FO.Product.Global;
import AP.CustomerInvoicing.Global;
import AP.FO.Party.Global;
import AP.FO.ProductDataMaintenance.Global;
import AP.Common.GDT;
var QueryConfiguration = BOConfigurationSolution.QueryByElements;
var ExecuteQueryConfiguration = QueryConfiguration.Execute();
var Validation = false;
if(ExecuteQueryConfiguration.Count()>0){
	if(ExecuteQueryConfiguration.GetFirst().IsSet()){
		if(ExecuteQueryConfiguration.GetFirst().Status== CLStatusSolutionCode.CO_01){
			Validation = true;
		}
	}
}
if(ExecuteQueryConfiguration.Count()<=0 || Validation == true){
	// - - - - - - - - - - - - - - - - P E R C E P C I Ó N  - - - - - - - - - - - - - - - - //
	if(this.zGratuita == true){
		var Items;
		foreach(Items in this.Item){
			Items.zCostoTotalTrnsferGratuita.content =  (Items.zCostoTrnsferGratuita.content * Items.Quantity.content);
			Items.zCostoTotalTrnsferGratuita.currencyCode = Items.zCostoTrnsferGratuita.currencyCode;
		}
		var Item;
		this.zMontoTotal.Clear();
		foreach(Item in this.Item){
			this.zMontoTotal.content = this.zMontoTotal.content + (Item.zCostoTotalTrnsferGratuita.content);
			this.zMontoTotal.currencyCode = Item.zCostoTrnsferGratuita.currencyCode;
		}

	}else{
		this.zMontoTotal.Clear();
	}
	while(true){
	
		//- - - - - - - - - - Withholding tax - - - - - - - - - - //
		if(!this.Status.LifeCycleStatusCode.IsInitial()){break;}

		if(this.TypeCode != "1462" && this.TypeCode != "1680"){break;}// 1462 = Invoice 

		if(!this.BuyerParty.IsSet()){break;}//if Customer is found

		if(!this.SellerParty.IsSet()){break;}// if company is found

		var insAuxIDWithHolding;
		var vCleanLabels = false;

		//- - - - - - - - - - Message - - - - - - - - - - //
		var LanguageCode = Context.GetCurrentUserLanguage().ToString();
	
		var msgWithholding = "El monto de retencion es menor al monto base por eso no aplica la retencion.";
		var msgWithholdingIVA = "El monto de retencion es menor al monto base por eso no aplica la retencion (Percepción).";

		if (LanguageCode != "ES"){
			msgWithholding = "The withholding net amount is less than the withholding minimun amount for that retention does not apply.";
			msgWithholdingIVA = "The net amount doesn't apply for withholding (Percepción).";
		}

		//- - - - - - - - - - Totales  - - - - - - - - -//	
		this.zTPercepcionCI.currencyCode = this.TotalGrossAmount.currencyCode;
		this.zTPercepcionCI.content.Clear();

		// - - - - - - - - - - Condition company - - - - - - - - - //
		var vSellerID = "";
		var vConditionCompany = "";
			vSellerID = this.SellerParty.PartyKey.PartyID.content;
		var queryCondition = BOMaintenanceCompanySales.QueryByElements;
		var paramsCondition = queryCondition.CreateSelectionParams();
			paramsCondition.Add(queryCondition.CompanyID, "I", "EQ", vSellerID);
		var resultCondition = queryCondition.Execute(paramsCondition).GetFirst();
		if(!resultCondition.IsSet()){vCleanLabels = true; break;}
	
		vConditionCompany = resultCondition.ConditionCompanyID;
	
		// - - - - - - - - - - find customer - - - - - - - - - //
		var vBuyerID = this.BuyerParty.PartyKey.PartyID.content;
		var queryCustomer = Customer.QueryByIdentification;
		var paramCustomer = queryCustomer.CreateSelectionParams();
			paramCustomer.Add(queryCustomer.InternalID, "I", "EQ", vBuyerID);
		var insCustomer = queryCustomer.Execute(paramCustomer).GetFirst();
		if(!insCustomer.IsSet()){break;}

		if(!insCustomer.CurrentCommon.IsSet()){break;}

		if(insCustomer.CurrentCommon.zExonerationCustomer){vCleanLabels = true; break;}// if Exoneration = false

		var vConditionCustomer = insCustomer.CurrentCommon.zConditionCustomer;

		if(this.Item.Count() < 1){break;}//exist items

		// - - - - - - - - - - find country company - - - - - - - - - //
		var vCountry = "";
		var queryCompany = Company.QueryByIDAndName;
		var paramCompany = queryCompany.CreateSelectionParams();
			paramCompany.Add(queryCompany.ID, "I", "EQ", vSellerID);
		var insCompany = queryCompany.Execute(paramCompany).GetFirst();
		if(insCompany.IsSet()){
			if(insCompany.CompanyAttributes.Count() > 0){
				vCountry = insCompany.CompanyAttributes.GetFirst().CountryOfRegistration;
			}
		}

		var vLanguageEnglish = Library::LanguageCode.ParseFromString("EN");
		var vNetAmount;
		var vCategoryID : ID;
		var vTax;


		// - - - - - - - - - - AuxIDWithHolding- - - - - - - - -//
		insAuxIDWithHolding = BOAuxIDWithHolding.Retrieve(this.UUID);
		if (insAuxIDWithHolding.IsSet()){
			insAuxIDWithHolding.Delete();
		}
		insAuxIDWithHolding = BOAuxIDWithHolding.Create();
		insAuxIDWithHolding.UUID.content = this.UUID.content;


		//- - - - - - - - - - - - - Foreach items 1 - - - - - - - - - -//
		var AuxitemCI;
		foreach (AuxitemCI in this.Item){
		
			//- - - - - - - - - - - - - category ID - - - - - - - - - -//
			vCategoryID.Clear();
			if(AuxitemCI.ItemProduct.IsSet()){
				if(AuxitemCI.ItemProduct.ProductKey.ProductTypeCode == "1"){
					var qmaterial = Material.QueryByDescription;
					var spmaterial = qmaterial.CreateSelectionParams();
						spmaterial.Add(qmaterial.ProductID.content, "I", "EQ", AuxitemCI.ItemProduct.ProductKey.ProductID.content);
					var rmaterial = qmaterial.Execute(spmaterial).GetFirst();
					if(rmaterial.IsSet()){
						if(rmaterial.CrossProcessCategory.IsSet()){
							vCategoryID = rmaterial.CrossProcessCategory.ProductCategoryIDKey.ProductCategoryInternalID;
						}
					}
				}
				else if (AuxitemCI.ItemProduct.ProductKey.ProductTypeCode == "2"){
					var qmaterial = ServiceProduct.QueryByDescription;
					var spmaterial = qmaterial.CreateSelectionParams();
						spmaterial.Add(qmaterial.ProductID.content, "I", "EQ", AuxitemCI.ItemProduct.ProductKey.ProductID.content);
					var rmaterial = qmaterial.Execute(spmaterial).GetFirst();
					if(rmaterial.IsSet()){
						if(rmaterial.CrossProcessCategory.IsSet()){
							vCategoryID = rmaterial.CrossProcessCategory.ProductCategoryIDKey.ProductCategoryInternalID;
						}
					}
				}
			}

			// Net amount
			vNetAmount = AuxitemCI.NetAmount.content;
			if(vNetAmount.ToString().Find("-") > -1){
				vNetAmount = vNetAmount * -1;
			}

			// - - - - - - - - - - Withholding Percepción - - - - - - - - - //
			if(!vCategoryID.IsInitial()){
											
				if(AuxitemCI.TaxAmount.content != 0){
					vTax = AuxitemCI.TaxAmount.content;
				}
				else{
					vTax = 0;
				}		
			
				var queryRelationNet = BORelationCustomerCompany.QueryByElements;
				var paramRelationNet = queryRelationNet.CreateSelectionParams();
					paramRelationNet.Add(queryRelationNet.TypeWithholding, "I", "EQ", CLTypeWithholdingSalesCode.CO_PER);
					paramRelationNet.Add(queryRelationNet.ConditionCompanyID, "I", "EQ", vConditionCompany);
					paramRelationNet.Add(queryRelationNet.ConditionCustomerID, "I", "EQ", vConditionCustomer);
					paramRelationNet.Add(queryRelationNet.CategoryID, "I", "EQ", vCategoryID.AddLeadingZeros());
					paramRelationNet.Add(queryRelationNet.Country, "I", "EQ", vCountry);
				var insRelationNet = queryRelationNet.Execute(paramRelationNet).GetFirst();
				if(insRelationNet.IsSet()){
				
					var queryMinimum = BOMinimumWithholdingAmountSales.QueryByElements;
					var paramMinimum = queryMinimum.CreateSelectionParams();
						paramMinimum.Add(queryMinimum.ID, "I", "EQ", insRelationNet.AmountMinimun);
					var insMinimunBaseSales = queryMinimum.Execute(paramMinimum).GetFirst();
					if(insMinimunBaseSales.IsSet()){
					
						var vBase = insMinimunBaseSales.Base;
						var vCurrency = insMinimunBaseSales.Coin;
						if (this.TotalGrossAmount.currencyCode != vCurrency){
							var vNetAmount2 = AuxitemCI.NetAmount.ConvertCurrencywithDate(vCurrency, this.ProposedInvoiceDate).content;
							vNetAmount = vNetAmount2;
						}

						var isAuxIDWithHolding = true;
						foreach (var insWithHolding in insAuxIDWithHolding.items.Where(n => n.ID == insRelationNet.AmountMinimun)){
							insWithHolding.SumAmount.content = insWithHolding.SumAmount.content + vNetAmount;
							isAuxIDWithHolding = false;
							if(insWithHolding.SumAmount.content >= vBase){
								insWithHolding.State = true;
								break;
							}				
						}
					
						if(isAuxIDWithHolding){
							var vItemIAWithHoldings = insAuxIDWithHolding.items.Create();
							if(vNetAmount >= vBase){
								vItemIAWithHoldings.State = true;
							}
							else{
								vItemIAWithHoldings.State = false;
							}
							vItemIAWithHoldings.ID = insRelationNet.AmountMinimun;
							vItemIAWithHoldings.SumAmount.content = vNetAmount;
						}
					}
				}
			}
			// - - - - - - - - - - fin: Withholding Percepción - - - - - - - - - //							
		}
	

		//- - - - - - - - - - - - - Foreach items 2 - - - - - - - - - -//
		var itemCI;
		foreach (itemCI in this.Item){
										
			//- - - - - - - - - - - - - category ID - - - - - - - - - -//
			vCategoryID.Clear();
			if(itemCI.ItemProduct.IsSet()){
				if(itemCI.ItemProduct.ProductKey.ProductTypeCode == "1"){
					var qmaterial = Material.QueryByDescription;
					var spmaterial = qmaterial.CreateSelectionParams();
						spmaterial.Add(qmaterial.ProductID.content, "I", "EQ", itemCI.ItemProduct.ProductKey.ProductID.content);
					var rmaterial = qmaterial.Execute(spmaterial).GetFirst();
					if(rmaterial.IsSet()){
						if(rmaterial.CrossProcessCategory.IsSet()){
							vCategoryID = rmaterial.CrossProcessCategory.ProductCategoryIDKey.ProductCategoryInternalID;
						}
					}
				}
				else if(itemCI.ItemProduct.ProductKey.ProductTypeCode == "2"){
					var qmaterial = ServiceProduct.QueryByDescription;
					var spmaterial = qmaterial.CreateSelectionParams();
						spmaterial.Add(qmaterial.ProductID.content, "I", "EQ", itemCI.ItemProduct.ProductKey.ProductID.content);
					var rmaterial = qmaterial.Execute(spmaterial).GetFirst();
					if(rmaterial.IsSet()){
						if(rmaterial.CrossProcessCategory.IsSet()){
							vCategoryID = rmaterial.CrossProcessCategory.ProductCategoryIDKey.ProductCategoryInternalID;
						}
					}
				}
			}

			// - - - - - - - - - - Net amount - - - - - - - - - //
			vNetAmount = itemCI.NetAmount.content;
			if(vNetAmount.ToString().Find("-") > -1){
				vNetAmount = vNetAmount * -1;
			}

			// - - - - - - - - - - Withholding Percepción - - - - - - - - - //
			if(!vCategoryID.IsInitial()){
											
				if(itemCI.TaxAmount.content != 0){
					vTax = itemCI.TaxAmount.content;
				}
				else{
					vTax = 0;
				}
										
				var queryRelationNet = BORelationCustomerCompany.QueryByElements;
				var paramRelationNet = queryRelationNet.CreateSelectionParams();
					paramRelationNet.Add(queryRelationNet.TypeWithholding, "I", "EQ", CLTypeWithholdingSalesCode.CO_PER);
					paramRelationNet.Add(queryRelationNet.ConditionCompanyID, "I", "EQ", vConditionCompany);
					paramRelationNet.Add(queryRelationNet.ConditionCustomerID, "I", "EQ", vConditionCustomer);
					paramRelationNet.Add(queryRelationNet.CategoryID, "I", "EQ", vCategoryID.AddLeadingZeros());
					paramRelationNet.Add(queryRelationNet.Country, "I", "EQ", vCountry);
				var insRelationNet = queryRelationNet.Execute(paramRelationNet).GetFirst();
				if(insRelationNet.IsSet()){
				
					var isAuxIDWithHolding = true;
					foreach(var insWithHolding in insAuxIDWithHolding.items.Where(n => n.ID == insRelationNet.AmountMinimun)){
					
						if(insWithHolding.State){
							var TempzPercentNETCINV = insRelationNet.Percent.RoundToString(2);
							TempzPercentNETCINV = TempzPercentNETCINV.Replace(",", ".");
							itemCI.zPer1PercentCI = Numeric.ParseFromString(TempzPercentNETCINV);

							var TempzAmountNETCINV = (this.TotalGrossAmount.content * (insRelationNet.Percent / 100)).RoundToString(2);
							TempzAmountNETCINV = TempzAmountNETCINV.Replace(",", ".");
							itemCI.zPer1AmountCI.content = Numeric.ParseFromString(TempzAmountNETCINV);
							itemCI.zPer1AmountCI.currencyCode = this.TotalGrossAmount.currencyCode;

							itemCI.zPer1IDCI = insRelationNet.WithHoldingCode;
							itemCI.zPer1BankCI = insRelationNet.BankAccountID;
							itemCI.zPer1AmountMinimunCI = insRelationNet.AmountMinimun;
							this.zTPercepcionCI.content = this.zTPercepcionCI.content + itemCI.zPer1AmountCI.content;
						}
						else{
							itemCI.zPer1PercentCI.Clear();
							itemCI.zPer1AmountCI.Clear();
							itemCI.zPer1IDCI.Clear();
							itemCI.zPer1BankCI.Clear();
							itemCI.zPer1AmountMinimunCI.Clear();
							raise mstext.Create("W", msgWithholding);
						}
					}
				}
				else{
					itemCI.zPer1PercentCI.Clear();
					itemCI.zPer1AmountCI.Clear();
					itemCI.zPer1IDCI.Clear();
					itemCI.zPer1BankCI.Clear();
					itemCI.zPer1AmountMinimunCI.Clear();
				}
			}
			// - - - - - - - - - - fin: Withholding Net - - - - - - - - - //
		}							
		// - - - - - - - - - - fin Foreach Items 2- - - - - - - - - //

		if(vCleanLabels){
			if(this.Item.Count() > 0){
				foreach (var itemItem in this.Item){
					itemItem.zPer1IDCI.Clear();
					itemItem.zPer1AmountCI.Clear();
					itemItem.zPer1PercentCI.Clear();
					itemItem.zPer1BankCI.Clear();
					itemItem.zPer1AmountMinimunCI.Clear();
				}
			}
		}
		//- - - - - - - - - - fin: Withholding Tax - - - - - - - - - - //
	
		break;
	}

	// - - - - - - - - - - - - - - - - F I N - P E R C E P C I Ó N  - - - - - - - - - - - - - - - - //
}
	