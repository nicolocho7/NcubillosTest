import ABSL;
import AP.Common.GDT as apCommonGDT;
import BASIS.Global as basis;
import AP.FO.TaxArrangement.Global;
import AP.FO.BusinessPartner.Global;
//Messages definition
var LanguageCode = Context.GetCurrentUserLanguage().ToString();
var msgCompany = "Por favor ingresar Empresa.";
var msgSetBook = "Por favor ingresar Set of Book";
var msgYear = "Por favor ingresar A�o";
var msgMounth = "Por favor ingresar Mes";
var msgNotConfig = "No hay datos de configuraci�n de esta empresa para el informe.";
var msgNotData = "La consulta no arroj� datos v�ldos para este informe.";
	if (LanguageCode != "ES")
	{
		msgCompany = "Please enter the Company.";
		msgSetBook = "Please enter the Set of Book";
		msgYear = "Please enter Year.";
		msgMounth = "Please enter Mounth";
		msgNotConfig = "No configuration data for the company fro the report.";
		msgNotData = "The query not returns valid data for this report.";
	}
	//Creacion de variables
	var insCompanyConfig;
	var strLine = "";
	var vCampo1;
	var vCampo2;
	var vCampo3;
	var vCampo4;
	var vCampo5;
	var vCampo6;
	var vCampo7;
	var vCampo8;
	var vCampo9;
	var vCampo10;
	var vCampo11;
	var vCampo12;
	var vDocDate;
	var vDocEmi;
	var vValid;
	var serviceID = "";  
	var parameter : NameAndValue;
	var parameters : collectionof NameAndValue;
	var txtstring = "";

while (true)
	{//Validaciones 
	if (this.CompanyID.IsInitial()) { break; }
	if (this.DateInitial.IsInitial()) { break; }
	if (this.DateEnd.IsInitial()) { break; }
	//Query al objeto account configuracion
if (!this.CompanyID.IsInitial() && !this.TypeReport.IsInitial())
{
	var qryConfigure = BOAccountConfiguration.QueryByElements;
	var parConfigure = qryConfigure.CreateSelectionParams();
		parConfigure.Add(qryConfigure.TypeReport, "I", "EQ", this.TypeReport);
		parConfigure.Add(qryConfigure.SetOfBookID.content, "I", "EQ", this.SetOfBookID.content);
		parConfigure.Add(qryConfigure.CompanyID, "I", "EQ", this.CompanyID.RemoveLeadingZeros());
	var resConfigure = qryConfigure.Execute(parConfigure);
	if (resConfigure.Count()<=0){
		var name : LANGUAGEINDEPENDENT_LONG_Name;
		var type : DocumentTypeCode;
		var desc : Description;
		var binary : basis:BinaryObject;
		var vNit="0";
		name = "LE" + vNit + this.DateEnd.GetYear() + this.DateEnd.GetMonth() + this.DateEnd.GetDay() + "030800" + "07" + "1111" + ".TXT";
		type.content = "10001";
		type.listID = "10296";
		binary.mimeCode = "text/plain";
		binary.content = Binary.ParseFromString(strLine);

		this.ReportsAttachments.CreateFile(type, name, name, desc, binary);	

		break;
	}
	if (resConfigure.Count() > 0)
	{
		insCompanyConfig = resConfigure.GetFirst();
	}
	else
	{
		raise msg.Create("E", msgNotConfig); 
	}

}
else
{
	raise msg.Create("E", msgNotConfig);
}

if (this.ReportsAttachments.DocumentList.Count() > 0){
	this.ReportsAttachments.DocumentList.Delete();
}

 
var StringValue = "";
var DateInitialString = this.DateInitial.ToString().Replace("/","-"); 
var DateFinalString = this.DateEnd.ToString().Replace("/","-");
StringValue ="CSETOFBKS eq '" + this.SetOfBookID.content + "'"
				+ " and CCOMPANY_UUID eq '" + this.CompanyID.RemoveLeadingZeros() //+ "'"	
				//+ " and CPOSTING_DATE ge datetime'" + this.DateInitial.GetYear()+ "-" + this.DateInitial.GetMonth() + "-" + this.DateInitial.GetDay() + "T00:00:00' ";
				+"'";
//StringValue = StringValue + " and CFISCYEAR eq " + this.DateEnd.GetYear();

var DateInitial;
var DateEnd;
if(!this.DateInitial.IsInitial() && !this.DateEnd.IsInitial()){
	DateInitial = this.DateInitial.GetYear() + "-" + this.DateInitial.GetMonth() + "-" + this.DateInitial.GetDay();
	DateEnd =  this.DateEnd.GetYear() + "-" + this.DateEnd.GetMonth() + "-" + this.DateEnd.GetDay();
}
StringValue = StringValue + " and (CPOSTING_DATE ge " +  "datetime'" + DateInitial +"T00:00:00' and CPOSTING_DATE le " +  "datetime'" + DateEnd +"T00:00:00')";

if(insCompanyConfig.AccountRange == true){
	StringValue = StringValue + " and (CGLACCT ge '" + insCompanyConfig.FromAccount.content + "' and CGLACCT le '" + insCompanyConfig.ToAccount.content+"')";
}else{
	if(insCompanyConfig.GLAccounts.Count() >0){
		var Cuentas;
		StringValue = StringValue + " and (";
		foreach(Cuentas in insCompanyConfig.GLAccounts){
			StringValue = StringValue + "CGLACCT eq '" + Cuentas.NCuentas.content +"'";
			if(Cuentas.NCuentas.content != insCompanyConfig.GLAccounts.GetLast().NCuentas.content){
				StringValue = StringValue + " or ";
			}
		}
		StringValue = StringValue + ")";
	}
  }
  serviceID = "PW00039";  
parameter.Name = "$select";  
parameter.Value = "CACC_DOC_UUID,CCLOSESTEP,CTAX_TYPE,CTAX_ID_NR,TOFF_BUSPARTNER,COFF_BUSPARTNER,KCVAL_QUANTITY,KCAMTCOMP,CACC_DOC_IT_UUID,CBUS_PART_UUID";
parameters.Add(parameter);    
parameter.Name = "$filter";
parameter.Value = StringValue;
parameters.Add(parameter);  
	
var ws_result = WebServiceUtilities.ExecuteWebService(serviceID, parameters);
var Content = ws_result.ResponseContent;  
var returnCode = ws_result.ReturnCode;  
var strData = "";
var sCurrency = "";
var sLocalCurrency = "";
var decAmount : DataType::DecimalValue;
var otherAmount : DataType::apCommonGDT:Amount;

var xname : LANGUAGEINDEPENDENT_LONG_Name;
var xtype : DocumentTypeCode;
var xdesc : Description;
var xbinary : basis:BinaryObject;

var xmlResult;

xmlResult = Library::RLStrings.XMLToArray(Content);

xname = "LEReport.TXT";
xtype.content = "10001";
xtype.listID = "10296";
xbinary.mimeCode = "text/plain";
xbinary.content = Binary.ParseFromString(Content);

this.ReportsAttachments.CreateFile(xtype, xname, xname, xdesc, xbinary);

var msgw = xmlResult.Count();


if (!this.CompanyID.IsInitial() && !this.SetOfBookID.content.IsInitial())
{
	////foreach( var RespObt in Resultado){
	foreach (var xmlRow in xmlResult){
		//vCampo1 = Library::RLStrings.GetElementByName(xmlRow.String, "CPOSTING_DATE").Trim();
		vCampo2 = Library::RLStrings.GetElementByName(xmlRow.String, "CACC_DOC_UUID").Trim();
		vCampo3 = Library::RLStrings.GetElementByName(xmlRow.String, "CCLOSESTEP").Trim();
		var VCampo3Sub = Library::RLStrings.GetElementByName(xmlRow.String, "CACC_DOC_IT_UUID").Trim();
		vCampo4 = Library::RLStrings.GetElementByName(xmlRow.String, "CTAX_TYPE").Trim();
		vCampo5 = Library::RLStrings.GetElementByName(xmlRow.String, "CTAX_ID_NR").Trim();
		vCampo6 = Library::RLStrings.GetElementByName(xmlRow.String, "TOFF_BUSPARTNER").Trim();
		
		//Validacion Campos Vacios
		if((vCampo6.IsInitial() || vCampo6 == "" || vCampo6 == "0" || vCampo6 == "Not Assigned" || vCampo6 == "No asignado")){
			//vCampo6 = "1";
			var CampoUUID = Library::RLStrings.GetElementByName(xmlRow.String, "CBUS_PART_UUID").Trim();
			//CampoUUID = "CLI121";
			//vCampo6 = CampoUUID;

			var Retric = BusinessPartner.Retrieve(CampoUUID);
			var queryBuss = BusinessPartner.QueryByIdentification;
			var selectionParamsBuss = queryBuss.CreateSelectionParams();
				selectionParamsBuss.Add(queryBuss.InternalID, "I", "EQ", CampoUUID);
			var resultDataBuss = queryBuss.Execute(selectionParamsBuss).GetFirst();
			if(resultDataBuss.IsSet()){
				if(resultDataBuss.TaxNumber.Count()>0){
					var TaxNumber =resultDataBuss.TaxNumber.GetFirst();
					if(!TaxNumber.TaxIdentificationNumberTypeCode.IsInitial()){
						vCampo4 = TaxNumber.TaxIdentificationNumberTypeCode.content.Trim();
					}
					if(!TaxNumber.PartyTaxID.IsInitial()){
						vCampo5 = TaxNumber.PartyTaxID.content.Trim();
					}
					if(resultDataBuss.CurrentCommon.IsSet()){
						vCampo6 = resultDataBuss.CurrentCommon.BusinessPartnerFormattedName.Trim();
					}
				}


			}else{
				vCampo4="0";
				vCampo5="0";
			}
		}
		
		
		
		vCampo7 = "99";
		vCampo8 = Library::RLStrings.GetElementByName(xmlRow.String, "KCAMTCOMP").Trim();
		vCampo9 = Library::RLStrings.GetElementByName(xmlRow.String, "KCVAL_QUANTITY").Trim();
		vCampo10 = Library::RLStrings.GetElementByName(xmlRow.String, "KCAMTCOMP").Trim();
		vCampo11 = "0.00";
		//vCampo12 = Library::RLStrings.GetElementByName(xmlRow.String, "CDOC_DATE").Trim();
		
		//Procesos
		//var DatePosting = vCampo1;
		//vCampo1 = vCampo1.Substring(0, 4)  + vCampo1.Substring(5, 2)  + vCampo1.Substring(8, 2);
		//var DocDate = vCampo12;
		//vCampo12 = vCampo12.Substring(8, 2) +"/"+ vCampo12.Substring(5, 2) +"/"+ vCampo12.Substring(0, 4);	
		//------------------------------------------------
		if (vCampo3 == "01" || vCampo3 == "001"){
			vCampo3 = "A";
		}else{
			if (vCampo3 == "010" || vCampo3 == "015" || vCampo3 == "020"){
				vCampo3 = "M";
			}else{
				if (vCampo3 == "080" || vCampo3 == "990" || vCampo3 == "991"){
					vCampo3 = "C";
				}
			}
		}
		if (vCampo4.IsInitial()){
			vCampo4="0";
		}
		if (vCampo5.IsInitial()){
			vCampo5="0";
		}
		var vCampo8Peso = ABSL:Numeric.ParseFromString(vCampo8);   
		//Tipo de identificacion fiscal
		var vIdentificacion = "0";
		switch (vCampo4){
			case "6" { vCampo4 = "0"; }
			case "2" { vCampo4 = "1"; }
			case "5" { vCampo4 = "4"; }
			case "1" { vCampo4 = "6"; }
			case "3" { vCampo4 = "7"; }
			case "4" { vCampo4 = "A"; }
		}
		//Validacion Campos Vacios
		if ((vCampo6.IsInitial() || vCampo6 == "Not Assigned") && (vCampo4.IsInitial() || vCampo4 == "") && (vCampo5.IsInitial() && vCampo5 == ""))
		{
			vCampo6 = "Clientes Varios";
			vCampo4 = "0";
			vCampo5 = "99999999";
		}
				//var YearPosting = DocDate.Substring(0, 4); 
		//var MontPosting = DocDate.Substring(5, 2);
		//var yearExecute = ABSL:Numeric.ParseFromString(this.DateEnd.GetYear());
		//var yearPosting = ABSL:Numeric.ParseFromString(YearPosting);
		//var MonthExecute = ABSL:Numeric.ParseFromString(this.DateEnd.GetMonth());
		//var MonthPosting = ABSL:Numeric.ParseFromString(MontPosting);
		//if (yearPosting == yearExecute){
			//if (MonthPosting == MonthExecute){
				//vValid = "1";
			//}else{
				//if (MonthPosting < MonthExecute){
					//vValid = "9"; 
				//}else{
					//vValid = "8";
				//}
			//}
		//}else{
			//vValid = "8";
		//}
		vValid ="1";
		var auxcamp9 = Library :: Numeric.ParseFromString(vCampo9);
		vCampo9= auxcamp9.RoundToString(0,true);
		var auxcamp10 = Library :: Numeric.ParseFromString(vCampo10);
		vCampo10 = auxcamp10.RoundToString(2).Replace(",", ".");
		strLine = strLine + this.DateEnd.GetYear() + this.DateEnd.GetMonth() + this.DateEnd.GetDay() + "|" +
				vCampo2 + "|" + 
				vCampo3 + VCampo3Sub + "|" +
				vCampo4 + "|" +
				vCampo5 + "|" +
				vCampo6 + "|" +
				vCampo7 + "|" +
				vCampo8Peso.RoundToString(2).Replace(",", ".") + "|" +
				vCampo9 + "|" +
				vCampo10 + "|" +
				vCampo11 + "|" +
				vValid + "|" + 
				
				"\r\n";
	}
}

var name : LANGUAGEINDEPENDENT_LONG_Name;
var type : DocumentTypeCode;
var desc : Description;
var binary : basis:BinaryObject;
var vNit;
var qCompanyTax = CompanyTaxArrangement.QueryByElements;
var pCompanyTax = qCompanyTax.CreateSelectionParams();
	pCompanyTax.Add(qCompanyTax.CompanyID,"I","EQ",this.CompanyID.RemoveLeadingZeros());
var insCompanyTax = qCompanyTax.Execute(pCompanyTax).GetFirst();
if(insCompanyTax.IsSet()){
	if(insCompanyTax.TaxIdentificationNumber.Count() > 0){
		vNit = insCompanyTax.TaxIdentificationNumber.GetFirst().PartyTaxID.content;
	}
////TXT1
	




}
var Name = "1";
if(strLine.IsInitial()){
	Name = "0";
}
name = "LE" + vNit + this.DateEnd.GetYear() + this.DateEnd.GetMonth() + this.DateEnd.GetDay() + "030800" + "07" + "1"+Name+"11" + ".TXT";
type.content = "10001";
type.listID = "10296";
binary.mimeCode = "text/plain";
binary.content = Binary.ParseFromString(strLine);

this.ReportsAttachments.CreateFile(type, name, name, desc, binary);		

this.Generado = true;
break;}
