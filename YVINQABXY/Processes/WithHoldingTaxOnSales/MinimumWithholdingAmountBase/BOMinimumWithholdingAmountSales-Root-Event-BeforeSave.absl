/*
	Add your SAP Business ByDesign scripting language implementation for:
		Business Object: BOMinimumWithholdingAmountSales
		Node: Root
		Event: BeforeSave 
		
	Note: 
	  - To access the elements of the business object node, 
	    use path expressions, for example, this.<element name>. 
	  - To use code completion, press CTRL+J. 
	  - The solution uses this script when:
		- the instance of the business object is being saved.
		- the instance of the business object is created from other sources like web services, preview screen, and so on.
*/

import ABSL;

var LanguageCode = Context.GetCurrentUserLanguage().ToString();

var msgConcept = "Falto ingresar concepto.";
var msgCoin = "Falto ingresar moneda.";
var msgUVTBase = "Falto ingresar uvt Base.";
var msgValueUVT = "Falto ingresar valor uvt.";
var msgCityID = "Falto ingresar ciudad.";
var msgTypeWithholding = "Falto seleccionar un tipo de retención.";
var msgBase = "Falto ingresar base.";

if (LanguageCode != "ES"){
	msgConcept = "Missing concept.";
	msgCoin = "Missing currency.";
	msgUVTBase = "Missing base uvt.";
	msgValueUVT = "Missing value uvt.";
	msgCityID = "Missing city.";
	msgTypeWithholding = "Missing selecting a type of retention.";
	msgBase = "Missing base.";
}

this.IsConsistent = true;

if (this.TypeWithholding.IsInitial()){
	raise msj.Create("E", msgTypeWithholding);
	this.IsConsistent = false;
}

if (this.Concept.IsInitial()){
	raise msj.Create("E", msgConcept);
	this.IsConsistent = false;
}

if (this.Coin.IsInitial()){
	raise msj.Create("E", msgCoin);
	this.IsConsistent = false;
}

switch(this.TypeWithholding){
	case CLTypeWithholdingSalesCode.CO_PER{
		if (this.UVTBase.IsInitial()){
			raise msj.Create("E", msgUVTBase);
			this.IsConsistent = false;
		}

		if (this.ValueUVT.IsInitial()){
			raise msj.Create("E", msgValueUVT);
			this.IsConsistent = false;
		}

		if ((!this.UVTBase.IsInitial()) && (!this.ValueUVT.IsInitial())){
			this.Base = this.ValueUVT.content * this.UVTBase;
		}

		//this.CityID.Clear();
	}
}

if (this.ID.IsInitial())
{
  	var Code = "BOMINIMUNWITHHOLDINGSALES";
	var InsBOBuildIDV2 = BOBuildIDV2.Retrieve(Code);
	if(InsBOBuildIDV2.IsSet())
	{
		InsBOBuildIDV2.Increase();		
	}else
	{
		var StructureBOBuildIDV2 : elementsof BOBuildIDV2;
		StructureBOBuildIDV2.ID = Code;
		StructureBOBuildIDV2.description = "Minimum Withholding Amount Sales";
		StructureBOBuildIDV2.UUID.content = UUID.Generate();
		InsBOBuildIDV2 = BOBuildIDV2.Create(StructureBOBuildIDV2);
		InsBOBuildIDV2.Increase();
	}
	this.ID = InsBOBuildIDV2.consecutive;

	//var queryBuildID = BOBuildID.QueryByElements;
	//var paramBuildID = queryBuildID.CreateSelectionParams();
	//paramBuildID.Add(queryBuildID.ID, "I", "EQ", "");
	//var resultBuildID = queryBuildID.Execute(paramBuildID).GetFirst();
	//if (resultBuildID.IsSet())
	//{
		//resultBuildID.consecutive = resultBuildID.consecutive + 1;
		//this.ID = resultBuildID.consecutive.ToString();
		//this.UUID.content = UUID.Generate();
	//}
	//else
	//{
		//this.ID = "1";
		//this.UUID.content = UUID.Generate();
		////-- create new register
		//var insBuildID = BOBuildID.Create();
		//if (insBuildID.IsSet())
		//{
			//insBuildID.consecutive = 1;
			//insBuildID.description = "Sales";
			//insBuildID.ID = "BOMINIMUNWITHHOLDINGSALES";
			//insBuildID.UUID.content = UUID.Generate();
		//}
	//}
}