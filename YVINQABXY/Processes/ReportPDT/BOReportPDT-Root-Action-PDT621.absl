import ABSL;
import AP.Common.GDT as apCommonGDT;
import BASIS.Global as basis;
import AP.FO.BusinessPartner.Global;
import AP.SupplierInvoicing.Global;
import AP.CustomerInvoicing.Global;


var insCompanyConfig;
var strLine = "";

//Messages definition
var LanguageCode = Context.GetCurrentUserLanguage().ToString();
var msgCompany = "Por favor ingresar Empresa.";
var msgSetBook = "Por favor ingresar Set of Book";
var msgLimitDate = "Por favor ingresar la Fecha Inicial";
var msgDateInitial = "Por favor ingresar fecha inicial";
var msgNotConfig = "No hay datos de configuraci?n de esta empresa para el informe.";
var msgNotData = "La consulta no arroj? datos v?ldos para este informe.";

if (LanguageCode != "ES") {
msgCompany = "Please enter the Company.";
msgSetBook = "Please enter the Set of Book";
msgLimitDate = "Please enter Limit Date.";
msgDateInitial = "Please enter Date Initial";
msgNotConfig = "No configuration data for the company fro the report.";
msgNotData = "The query not returns valid data for this report.";
}

//Company Validation

var xmlResult;


while (true)
{
	var txtstring = "";
	if (this.CompanyID.IsInitial()) { break; }
	if (this.EDateInitial.IsInitial()) { break; }
	if (this.EDateEnd.IsInitial()) { break; }
	
	var serviceID = "";  
	var parameter : NameAndValue;
	var parameters : collectionof NameAndValue;
	//Caluclar los primeros dias 
	var IDSolution;
	var qryIdSolution = BOConfigurationIDSolution.QueryByElements;
	var QryParamsSolution = qryIdSolution.CreateSelectionParams();
		//QryParamsSolution.Add(qryIdSolution.Inactive,"I", "EQ", "false");
	var ResultSoluton = qryIdSolution.Execute(QryParamsSolution).GetFirst();
	if(ResultSoluton.IsSet()){
		IDSolution = ResultSoluton.IDSolution.Trim();
	}

	//FILTRO DINAMICO 
	var DateInitialString = this.EDateInitial.ToString().Replace("/","-");
	var DateFinalString = this.EDateEnd.ToString().Replace("/","-");
	//var YearDateTo = ABSL:Numeric.ParseFromString(TemDateToM);
	var StringValue = "(CPOSTINTEROOT95EF3888DAFCC5D7 ge datetime'"+DateInitialString+"T00:00:00' and CPOSTINTEROOT95EF3888DAFCC5D7 le datetime'"+DateFinalString+"T00:00:00')";
	//var StringValue = "(CPOSTINTEROOT95EF3888DAFCC5D7 ge datetime'"+DateInitialString+"T00:00:00' and CPOSTINTEROOT95EF3888DAFCC5D7 le datetime'"+DateFinalString+"T00:00:00') and CPAYMENCEROOTE092D471B60562A5 eq 'FVSP-34'";
	//and CINVOICE_DATE le datetime'"+
	//this.EDateEnd.GetYear()+"-"+this.EDateEnd.GetMonth()+"-"+this.EDateEnd.GetDay()+"T00:00:00'";
	
	//Campos Consumo MashupCACC_DOC_ITEM_ID
	serviceID = "PW00056";  
	parameter.Name = "$select";  
	parameter.Value = "CCUSTOMIDROOT24350D7856AE72AD,CPAYMENCEROOTE092D471B60562A5,KCPAYMENNTROOT1F6651833A42583D,C"+IDSolution+"_476CD5508F,CDOC_INV_DATE";
	parameters.Add(parameter);   
	parameter.Name = "$filter";
	parameter.Value = StringValue;
	parameters.Add(parameter);  
	
	var ws_result = WebServiceUtilities.ExecuteWebService(serviceID, parameters);
	var Content = ws_result.ResponseContent;  
	var returnCode = ws_result.ReturnCode;  
	var strData = "";
	var sCurrency = "";
	var sLocalCurrency = "";
	var decAmount : DataType::DecimalValue;
	var otherAmount : DataType::apCommonGDT:Amount;
	
	var xname : LANGUAGEINDEPENDENT_LONG_Name;
	var xtype : DocumentTypeCode;
	var xdesc : Description;
	var xbinary : basis:BinaryObject;
	
	xname = "Resultado.txt";
	xtype.content = "10001";
	xtype.listID = "10296";
	xbinary.mimeCode = "text/plain";
	xbinary.content = Binary.ParseFromString(Content);
	this.ReportsAttachments.CreateFile(xtype, xname, xname, xdesc, xbinary);
	
	////
	////
	//var xmlResult;
	////var FechaAno = this.EDateInitial.GetYear();
	////var FechaMes = this.EDateInitial.GetMonth();
	////
	xmlResult = Library::RLStrings.XMLToArray(Content);
	
	if (xmlResult.Count() == 0) { break; }
	
	var NumeroCuent = "";
	foreach (var RegistroCompras in xmlResult){
		var Campo1=""; 
		var Campo2="";
		var Campo3="";
		var Campo4="";
		var Campo5="";
		var Campo6="";
		var Campo7="";
		var Campo8="";
		var Campo9="";
		var Campo10="";
	
		Campo1 = Library::RLStrings.GetElementByName(RegistroCompras.String, "CCUSTOMIDROOT24350D7856AE72AD").Trim();

		
		var queryCustomer = Customer.QueryByIdentification;
		var selectionParamsCustomer = queryCustomer.CreateSelectionParams();
		selectionParamsCustomer.Add(queryCustomer.InternalID, "I", "EQ", Campo1);
		// Result
		 var resultDataCustomer = queryCustomer.Execute(selectionParamsCustomer).GetFirst();
		if(resultDataCustomer.IsSet()){
			if(resultDataCustomer.TaxNumber.Count()>0){
				var FirstTax = resultDataCustomer.TaxNumber.GetFirst();
				if(!FirstTax.PartyTaxID.IsInitial()){
					Campo1 = FirstTax.PartyTaxID.content;
				}
			}	 
		}


		var DataQry =Library::RLStrings.GetElementByName(RegistroCompras.String, "CPAYMENCEROOTE092D471B60562A5").Trim();
		var QryCertif = BOWithHoldingCertificateSales.QueryByElements;
		var ParamsCerti = QryCertif.CreateSelectionParams();
			ParamsCerti.Add(QryCertif.PaymentReference, "I", "EQ", DataQry);
		var result = QryCertif.Execute(ParamsCerti).GetFirst();
		if(result.IsSet()){
			Campo2 = result.CertificateSeries;
			Campo3 = result.CertificateNumber;
			Campo4 = result.CertificateDate;
		}
		Campo5 = Library::RLStrings.GetElementByName(RegistroCompras.String, "KCPAYMENNTROOT1F6651833A42583D").Trim();
		if(ABSL:Numeric.IsNumeric(Campo5)){
			var vCampo5Numeric = ABSL:Numeric.ParseFromString(Campo5);
			Campo5 = vCampo5Numeric.RoundToString(2,true).Replace(",", ".");
		}
		var Comprobante = Library::RLStrings.GetElementByName(RegistroCompras.String, "C"+IDSolution+"_476CD5508F").Trim();
		var Taman = Comprobante.Length();
		if(Taman > 3) {
			Campo6 = Comprobante.Substring(0, 2);
			Campo7 = Comprobante.Substring(3, 4);
			var Cont = Comprobante.Length() - 8;
			Campo8 = Comprobante.Substring(8, Cont);
		}
		Campo9 = Library::RLStrings.GetElementByName(RegistroCompras.String, "CDOC_INV_DATE").Trim();
		Campo9 = Campo9.Substring(8,2) +"/"+ Campo9.Substring(5,2) +"/"+Campo9.Substring(0,4);
		var queryCust = CustomerInvoice.QueryByElements;
		var selectionParamsCust = queryCust.CreateSelectionParams();
			selectionParamsCust.Add(queryCust.ID.content, "I", "EQ", DataQry);
		var resultDataCust = queryCust.Execute(selectionParamsCust).GetFirst();
		if(resultDataCust.IsSet()){
			Campo10 = resultDataCust.TotalGrossAmount.content.RoundToString(2,true);
		
		}

		txtstring =  txtstring + 
						Campo1 + "|" +
						Campo2 + "|" +
						Campo3 + "|" +
						Campo4 + "|" +
						Campo5 + "|" +
						Campo6 + "|" +
						Campo7 + "|" +
						Campo8 + "|" +
						Campo9 + "|" +
						Campo10 + "|" + "\r\n";
		

		}
	var ContMont = this.EDateInitial.GetMonth().Length();
	var Mes;
	if(ContMont<2){
		Mes = "0" + this.EDateInitial.GetMonth();
	}else{
		Mes = this.EDateInitial.GetMonth();
	}
	var NameReport = "0621"+  this.Companyto.RUC + this.EDateInitial.GetYear()+ Mes + "R";

	
	xname = NameReport + ".txt";
	xtype.content = "10001";
	xtype.listID = "10296";
	xbinary.mimeCode = "text/plain";
	xbinary.content = Binary.ParseFromString(txtstring);
	this.ReportsAttachments.CreateFile(xtype, xname, xname, xdesc, xbinary);
	break;
	
}
