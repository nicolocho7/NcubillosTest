import ABSL;
import AP.Common.GDT as apCommonGDT;
import BASIS.Global as basis;

this.IsConsistent = true;

var insCompanyConfig;
var vCampo92 = 0;
var vCampo92Ant = 0;
var strLine = "";
var adicion = 0;
var deduccion = 0;
//Messages definition
var LanguageCode = Context.GetCurrentUserLanguage().ToString();
var msgCompany = "Por favor ingresar Empresa.";
var msgSetBook = "Por favor ingresar Set of Book";
var msgYear = "Por favor ingresar Año";
var msgMounth = "Por favor ingresar Mes";
var msgNotConfig = "No hay datos de configuración de esta empresa para el informe.";
var msgNotData = "La consulta no arrojó datos váldos para este informe.";

if (LanguageCode != "ES")
{
	msgCompany = "Please enter the Company.";
	msgSetBook = "Please enter the Set of Book";
	msgYear = "Please enter Year.";
	msgMounth = "Please enter Mounth";
	msgNotConfig = "No configuration data for the company fro the report.";
	msgNotData = "The query not returns valid data for this report.";
}

//Company Validation
if (this.ECompany.IsInitial())
{
	this.IsConsistent = false;
	raise msg.Create("E", msgCompany); 
}

//SetBook validation
if (this.EConfigBooKDialy.IsInitial())
{
	this.IsConsistent = false;
	raise msg.Create("E", msgSetBook);
}


//Mounth Validation
if (this.EDate.IsInitial())
{
	this.IsConsistent = false;
	raise msg.Create("E", msgMounth);
}

if (!this.ECompany.IsInitial() && !this.EConfigBooKDialy.content.IsInitial())
{
	var qryConfigure = BO_Account49Configuration.QueryByElements;
	var parConfigure = qryConfigure.CreateSelectionParams();
	parConfigure.Add(qryConfigure.SetOfBooksID.content, "I", "EQ", this.EConfigBooKDialy.content);
	parConfigure.Add(qryConfigure.CompanyID, "I", "EQ", this.ECompany);
	var resConfigure = qryConfigure.Execute(parConfigure);

	if (resConfigure.Count() > 0) { insCompanyConfig = resConfigure.GetFirst(); }
	else
	{
		this.IsConsistent = false;
		raise msg.Create("E", msgNotConfig); 
	}
}
else
{
	this.IsConsistent = false;
	raise msg.Create("E", msgNotConfig);
}

if (this.IsConsistent)
{
	if (this.ReportsAttachments.DocumentList.Count() > 0) { this.ReportsAttachments.DocumentList.Delete(); }
	
	var serviceID = "";  
	var parameter : NameAndValue;
	var parameters : collectionof NameAndValue;  
	var StringValue = "CSETOFBKS eq '" + this.EConfigBooKDialy.content + "'"
					+ " and CCOMPANY_UUID eq '" + this.ECompany + "'";

	if (!this.EDate.IsInitial()) { StringValue = StringValue + " and CFISCALYEARPERIO eq " + this.EDate.GetMonth() + this.EDate.GetYear(); }
	
	//Campos Consumo Mashup
	serviceID = "PW00048";  
	parameter.Name = "$select";  
	parameter.Value = "CFISCALYEARPERIO,CACC_DOC_UUID,CCLOSESTEP,COEDPARTNER,CGLACCT,CNOTE_HD,KCAMTCOMP,CACC_DOC_ITEM_ID";
	parameters.Add(parameter);  
	parameter.Name = "$filter";
	parameter.Value = StringValue;
	parameters.Add(parameter);  
	
	var ws_result = WebServiceUtilities.ExecuteWebService(serviceID, parameters);
	var Content = ws_result.ResponseContent;
	//raise msg.Create("E", Content);
	var returnCode = ws_result.ReturnCode;  
	var strData = "";
	var sCurrency = "";
	var sLocalCurrency = "";
	var decAmount : DataType::DecimalValue;
	var otherAmount : DataType::apCommonGDT:Amount;

	var xname : LANGUAGEINDEPENDENT_LONG_Name;
	var xtype : DocumentTypeCode;
	var xdesc : Description;
	var xbinary : basis:BinaryObject;
	var name : LANGUAGEINDEPENDENT_LONG_Name;
	var type : DocumentTypeCode;
	var desc : Description;
	var binary : basis:BinaryObject;
	var xmlResult;
	name = "XML";
	type.content = "10001";
	type.listID = "10296";
	binary.mimeCode = "text/plain";
	binary.content = Binary.ParseFromString(Content);

	this.ReportsAttachments.CreateFile(type, name, name, desc, binary);
	xmlResult = Library::RLStrings.XMLToArray(Content);


	var msgw = xmlResult.Count();

	//Campos para asignar
	
	//var CampoInicial = this.EDateExecution.GetYear() + this.EDateExecution.GetMonth() + "00"; 
	var vCampo1;
	var vCampo2;
	var vCampo3;
	var vCampo4;
	var vCampo5;
	var vCampo6;
	var vCampo7;
	var vCampo8;
	var vCampo9;
	var vCampo10;
	var vCampo11;
	var Pos;
	
	if (!this.ECompany.IsInitial() && !this.EConfigBooKDialy.content.IsInitial())
	{
		//Query
		var QrybOSUB = BO_Account49Configuration.QueryByElements;
		var ParameBoSub = QrybOSUB.CreateSelectionParams();
		ParameBoSub.Add(QrybOSUB.SetOfBooksID.content, "I", "EQ", this.EConfigBooKDialy.content);
		ParameBoSub.Add(QrybOSUB.CompanyID, "I", "EQ", this.ECompany);
		var Resultado = QrybOSUB.Execute(ParameBoSub);
		if (Resultado.Count() > 0)
		{
			////foreach( var RespObt in Resultado){
			foreach (var xmlRow in xmlResult)
			{
			
				var Valida = 0;
				if (Valida == 0)
				{   
					//,,,,CTAX_TYPE,CTAX_ID_NR,COFF_BUSPARTNER,CPOSTING_DATE,KCAMTCOMP		
					vCampo1 = Library::RLStrings.GetElementByName(xmlRow.String, "CFISCALYEARPERIO").Trim();
					vCampo2 = Library::RLStrings.GetElementByName(xmlRow.String, "CACC_DOC_UUID").Trim();
					vCampo3 = Library::RLStrings.GetElementByName(xmlRow.String, "CCLOSESTEP").Trim();
					vCampo4 = Library::RLStrings.GetElementByName(xmlRow.String, "COEDPARTNER").Trim(); 
					//vCampo5 = Library::RLStrings.GetElementByName(xmlRow.String, "CTAX_ID_NR").Trim(); //Numero identificacion
					//vCampo6 = Library::RLStrings.GetElementByName(xmlRow.String, "TOFF_BUSPARTNER").Trim();
					vCampo7 = Library::RLStrings.GetElementByName(xmlRow.String, "CGLACCT").Trim();
					vCampo8 = Library::RLStrings.GetElementByName(xmlRow.String, "CNOTE_HD").Trim();
					vCampo9 = Library::RLStrings.GetElementByName(xmlRow.String, "KCAMTCOMP").Trim();
					vCampo10 = "1";
					Pos = Library::RLStrings.GetElementByName(xmlRow.String, "CACC_DOC_ITEM_ID").Trim();
			
					if (vCampo3 == "01") { vCampo3 = "A"; }
					else
					{
						if (vCampo3 == "010" || vCampo3 == "015" || vCampo3 == "020") { vCampo3 = "M"; }
						else
						{
							if (vCampo3 == "080" || vCampo3 == "990" || vCampo3 == "991")
							{vCampo3 = "C"; }
						}
					}
					//Campo1
					var vCampo1Periodo;
					vCampo1Periodo = this.EDate.ToString();
		
					//Campo7
					//var vCampo7Fecha;
					//vCampo7Fecha =vCampo7.Substring(8,2) + "/" + vCampo7.Substring(5,2)+"/" +vCampo7.Substring(0,4);
		
					//Campo8
					//var vCampo8Peso;
					var vCampo8Peso = ABSL:Numeric.ParseFromString(vCampo8); 
					var vCampo42;  
					if (vCampo4.Length() > 1) { vCampo42 = vCampo4.Substring(0, 2) + "|" + vCampo4.Substring(4, 4) + "|" + vCampo4.Substring(9, 8); }
					else { vCampo42 = "||"; }
					//Validacion Campos Vacios (Logica Tony)
					//if(vCampo6.IsInitial() || vCampo6 == "Not Assigned"  && vCampo4.IsInitial() || vCampo4 == "" && vCampo5.IsInitial() && vCampo5 == "")
					//{
					//vCampo6 = "Clientes Varios";
					//vCampo4 = "0";
					//vCampo5 = "99999999";
					//}else{
					//vCampo6 = vCampo6;
					//vCampo4 = vCampo4;
					//vCampo5 = vCampo5;
					//}
					//

					//Campo9
					//if( vCampo7 == this.EDate.GetYear()){
					//if(vCampo7 == this.EDate.GetMonth()){
					//vCampo11 = "1";
					//}else{
					//if(vCampo7 < this.EDate.GetMonth()){
					//vCampo11 = "9"; 
					//}else{
					//vCampo11 = "8";
					//}
					//}
					//}else{
					//vCampo11 = "8";
					//}
					//
					if (vCampo8.IsInitial() || vCampo8 == "") { vCampo8 = "Inventario y balance"; }
					vCampo92Ant = vCampo92;
					vCampo92 = vCampo92 + ABSL:Numeric.ParseFromString(vCampo9);
					if(ABSL:Numeric.ParseFromString(vCampo9) >= 0)
					{
						adicion = ABSL:Numeric.ParseFromString(vCampo9);
						deduccion = 0;
					}
					else
					{
						deduccion = ABSL:Numeric.ParseFromString(vCampo9);
						adicion = 0;
					}
					var vCampo9String = vCampo92.RoundToString(2).Replace(",", ".");
					var adicionString = adicion.RoundToString(2).Replace(",", ".");
					var deduccionString = deduccion.RoundToString(2).Replace(",", ".");
					deduccionString = deduccionString.Replace("-", "");
					if (!vCampo2.IsInitial() || vCampo2.Length() >= 1)
					{
						strLine = strLine + vCampo1Periodo.Replace("-", "") + "|" +
									vCampo2 + "|" + 
									vCampo3 + Pos + "|" +
									vCampo42 + "|" +
									vCampo7 + "|" +
									vCampo8 + "|" +
									vCampo9String + "|" +
									adicionString + "|" +
									deduccionString + "|" +
									vCampo10 + "|" + "\r\n";
					}
				}
			}
		}
	}
}
var name : LANGUAGEINDEPENDENT_LONG_Name;
var type : DocumentTypeCode;
var desc : Description;
var binary : basis:BinaryObject;

var QryConfigure = BO_Account49Configuration.QueryByElements;
var parameterQry = QryConfigure.CreateSelectionParams();
parameterQry.Add(QryConfigure.CompanyID, "I", "EQ", this.ECompany);
			
var ResConf = QryConfigure.Execute(parameterQry).GetFirst();
var vRucCompany;
	
if (ResConf.IsSet())
{
	vRucCompany = ResConf.RucCompany;
}

////TXT1
name = "LE" + vRucCompany + this.EDate.GetYear() + this.EDate.GetMonth() + this.EDate.GetDay() + "031500" + "07" + "1111" + ".TXT";
type.content = "10001";
type.listID = "10296";
binary.mimeCode = "text/plain";
binary.content = Binary.ParseFromString(strLine);

this.ReportsAttachments.CreateFile(type, name, name, desc, binary);

