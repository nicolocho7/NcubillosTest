/*
	Add your SAP Business ByDesign scripting language implementation for:
		Business Object: BOMassLoadSunat
		Node: Root
		Action: Load 
		
	Note: 
	  - To access the elements of the business object node, 
	    use path expressions, for example, this.<element name>. 
	  - To use code completion, press CTRL+J. 
	   
*/

import ABSL;
import AP.Common.GDT as apCommonGDT;
import AP.FinancialAccounting.Global;
import AP.FO.BusinessPartner.Global;


var insData : elementsof BOResponseSunat;

var separador = ";";
var string = "";
var subString = "";
var indiceFind = 0;
var indiceLast;
var i = 0;
var subIndiceLast = 0;
var subIndiceFind = 0;
var subStringAux = "";
var j = 0;
var contador = 0;

var LanguageCode = Context.GetCurrentUserLanguage().ToString();

var msgSave = "Grabar para guardar los cambios.";
var msgPosition = "Posición ";
var msgpercentage = ": campo porcentaje no es valido ";
var msgpercentageSer = ": campo porcentaje servicios no es valido ";
var msgminimumAmount = ": campo monto minimo no es valido ";
var msgretention = ": debe ingresar 1, 2, 3, 4 ó 5 por retención Fuente, IVA, ICA, Dis 1 ó Dis 2";
var msgMaximumAmount = ": campo monto maximo no es valido";
var msgErrorRecord = ": error al grabar";
var msgLoaded = "Se cargaron ";
var msgpositions = " posiciones";
var msgattach = "Solo debe adjuntar un archivo";
var msgCountryCode = ": El campo País no es válido máximo dos letras";
var msgMiniumWithh = ": no coinciden los datos del campo monto minimo co el tipo de retencion";
var msgCity = ": El Campo Ciudad no es valido";

if(LanguageCode != "ES"){
	msgSave = "Save to save the changes.";
	msgPosition = "Position ";
	msgpercentage = ": percentage field is not valid ";
	msgpercentageSer = ": field service percentage is not valid ";
	msgminimumAmount = ": minimum amount field is invalid ";
	msgretention = ": You must enter 1, 2, 3, 4 or 5 for retention FUE, IVA, ICA, Dis 1 or Dis 2";
	msgMaximumAmount = ": maximum amount field is invalid";
	msgErrorRecord = ": error record";
	msgLoaded = "they loaded ";
	msgpositions = " positions";
	msgattach = "You only need to attach a file";
	msgCountryCode = ": Country field is not valid maximum two letters";
	msgMiniumWithh = ": Minimum field data does not match Withholding type";
	msgCity = ": The city field is invalid";
}





var DatoCabe;
var Espacio;
var NumeroLote;
var Constancia;
var Comprobante;

if (this.Attachment.IsSet() && this.Attachment.DocumentList.Count() == 1)
{
	var MyAtt = this.Attachment.DocumentList;
	if (MyAtt.GetFirst().MIMECode == "text/plain")
	{
		var FileCont = MyAtt.GetFirst().FileContent;
		//Cadena binarios
		string = FileCont.BinaryObject.content.ToString();
		while (indiceFind != -1)
		{
			subIndiceLast = 0;
			subIndiceFind = 0;
			subStringAux = "";
			j = 0;
			i = i + 1;
			indiceLast = string.Length() - 1;
			indiceFind = string.Find("\n");
			
			//var Fila = this.Positions.Create();

			if (indiceFind != -1)
			{
				subString = string.Substring(0, indiceFind);
				//Quita la que valida y cuenta el resto 
				string = string.Substring(indiceFind + 1, indiceLast - indiceFind); 
				//Detalle
				while (subIndiceFind != -1){
					j = j + 1;
					subIndiceLast = subString.Length() - 1;
					subIndiceFind = subString.Find("\t");
					subStringAux = subString.Substring(0, subIndiceFind);
					subString = subString.Substring(subIndiceFind + 1, subIndiceLast - subIndiceFind);
					if(j == 1){
						DatoCabe  = subStringAux.Trim();
					}
					if(DatoCabe == "Lote"){
						if(j == 2){
							Espacio = subStringAux.Trim();
							NumeroLote = subString.Substring(0, subString.Length() - 1);
							subIndiceFind= -1;
						}
					}
					if(DatoCabe == "Numero de constancia"){
						if(j == 2){
							Espacio = subStringAux.Trim();
							Constancia = subString.Substring(0, subString.Length() - 1);
							subIndiceFind= -1;
						}
					}
					if(DatoCabe == "N�mero de Comprobante"){
						if(j == 2){
							Espacio = subStringAux.Trim();
							Comprobante = subString.Substring(0, subString.Length() - 1);
							subIndiceFind= -1;
						}
						if(!Comprobante.IsInitial()){
							var Serie = Comprobante.Substring(0,4);
							var ValorTotal = Comprobante.Length() - 5;
							var Consecutivo = Comprobante.Substring(5,ValorTotal);
							var QryAdminDetra = BOAdminDetra.QueryByElements;
							var ParamsAdmin = QryAdminDetra.CreateSelectionParams();
								ParamsAdmin.Add(QryAdminDetra.batch, "I", "EQ" , NumeroLote);
								ParamsAdmin.Add(QryAdminDetra.Series, "I", "EQ" , Serie);
								ParamsAdmin.Add(QryAdminDetra.Number, "I", "EQ" , Consecutivo);
							var ResultDetra = QryAdminDetra.Execute(ParamsAdmin).GetFirst();
							if(ResultDetra.IsSet()){
								ResultDetra.Prof = Constancia;
							}
							DatoCabe="";
							Comprobante = "";
						}
					}
				}//fin while(subIndiceFind != -1){      
			}//fin if(indiceFind != -1){
		}//fin while(indiceFind != -1){
	}
	
}

var hola= "Hola mundo";

//if (this.Attachment.IsSet() && this.Attachment.DocumentList.Count() == 1)
//{
	//var MyAtt = this.Attachment.DocumentList;
	//var FileCont = MyAtt.GetFirst().FileContent;
	//string = FileCont.BinaryObject.content.ToString();
	//raise msj.Create("I", msgSave); 
//
	//while (indiceFind != -1)
	//{
		//subIndiceLast = 0;
		//subIndiceFind = 0;
		//subStringAux = "";
		//j = 0;
		//i = i + 1;
		//indiceLast = string.Length() - 1;
		//indiceFind = string.Find("\n");
		//if (indiceFind != -1)
		//{
			//insData.Clear();
			//var insIsConsistent = true;
//
			//subString = string.Substring(0, indiceFind);
			//string = string.Substring(indiceFind + 1, indiceLast - indiceFind);
			////Detalle
			//while (subIndiceFind != -1)
			//{
				//j = j + 1;
	//
				//subIndiceLast = subString.Length() - 1;
				//subIndiceFind = subString.Find(" ");
				//subStringAux = subString.Substring(0, subIndiceFind);
				//subString = subString.Substring(subIndiceFind + 1, subIndiceLast - subIndiceFind);
//
				//if(j == 1){//batch
					//insData.Batch = subStringAux.Trim(); 
				//}
				//else if(j == 2){//proof
					//insData.deposit = subStringAux.Trim(); 
				//}
			//
		////proof
		////ref_external
					//
					//
					//var insLoad = BOResponseSunat.Create(insData);
					//if (!insLoad.IsSet()){
						//raise msj.Create("E", msgPosition + i.ToString().Trim() + msgErrorRecord); 
					//}
					//else{
						//contador = contador + 1;
						//this.cargado = true;
					//}
					//subIndiceFind = -1;
				//
			//}//fin while(subIndiceFind != -1){ 					
		//}//fin if(indiceFind != -1){
	//}//fin while(indiceFind != -1){
	//raise msj.Create("I", msgLoaded + contador.ToString().Trim() + msgpositions); 
//}
//else{
	//this.isConsistent = false;
	//raise msj.Create("E", msgattach);
//}
//
//